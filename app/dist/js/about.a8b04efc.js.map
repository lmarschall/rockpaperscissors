{"version":3,"sources":["webpack:///./src/views/About.vue","webpack:///./src/views/About.vue?008a"],"names":["class","disabled","value","name","sign","id","signs","key","type","save","dataReady","modes","predict","data","hand","detected","x","y","w","h","landmarks","collect","train","collectCounter","p5","model","video","label","result","mounted","this","setup","methods","sketch","poseNet","handpose","modelReady","on","gotPose","options","inputs","outputs","task","debug","neuralNetwork","modelInfo","metadata","weights","load","modelLoaded","console","log","createDiv","p","self","createCanvas","createCapture","VIDEO","width","height","aspectRatio","hide","draw","translate","scale","image","stroke","noFill","strokeWeight","rect","i","length","landmark","point","results","boundingBox","topLeft","bottomRight","push","target","addData","classify","gotResults","html","errors","saveData","loadData","epochs","finished","render"],"mappings":"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","file":"js/about.a8b04efc.js","sourcesContent":["<template>\n    <div class=\"about\">\n        <h1>This is an about page</h1>\n        <select name=\"signs\" v-model=\"sign\" id=\"signs\">\n            <option disabled value=\"\">SIGN</option>\n            <option v-for=\"sign in signs\" v-bind:key=\"sign\">{{ sign }}</option>\n        </select>\n        <button\n            type=\"button\"\n            v-on:click=\"\n                modes.collect = true;\n                collectCounter = 100;\n            \"\n        >\n            Collect\n        </button>\n        <button type=\"button\" v-on:click=\"save\">Save</button>\n        <button type=\"button\" v-on:click=\"dataReady\">Train</button>\n        <button type=\"button\" v-on:click=\"modes.predict = !modes.predict\">\n            Predict\n        </button>\n    </div>\n</template>\n\n<script>\nimport ml5 from \"ml5\";\nimport P5 from \"p5\";\n\nexport default {\n    name: \"About\",\n    data() {\n        return {\n            hand: {\n                detected: false,\n                x: 0,\n                y: 0,\n                w: 0,\n                h: 0,\n                landmarks: []\n                // vectors: []\n            },\n            sign: \"\",\n            signs: [\"ROCK\", \"PAPER\", \"SCISSORS\"],\n            modes: {\n                collect: false,\n                train: false,\n                predict: false\n            },\n            collectCounter: 0,\n            p5: null,\n            model: null,\n            video: null,\n            label: null,\n            result: null\n        };\n    },\n    mounted: function() {\n        this.setup();\n    },\n    methods: {\n        setup: function() {\n            // setup p5 canvas for drawing hand pose\n            this.p5 = new P5(this.sketch);\n\n            // setup ml5 handpose model for detecting hand pose\n            const poseNet = ml5.handpose(this.video, this.modelReady);\n            poseNet.on(\"predict\", this.gotPose);\n\n            // setup own model for detecting custom hand pose\n            let options = {\n                inputs: 21,\n                outputs: 3,\n                task: \"classification\",\n                debug: true\n            };\n            this.model = ml5.neuralNetwork(options);\n            const modelInfo = {\n                model: \"/model.json\",\n                metadata: \"/model_meta.json\",\n                weights: \"/model.weights.bin\"\n            };\n            this.model.load(modelInfo, this.modelLoaded);\n        },\n\n        modelLoaded: function() {\n            console.log(\"Model loaded\");\n            this.result = this.p5.createDiv(\"Result: ...\");\n        },\n\n        sketch: function(p) {\n            const self = this;\n\n            p.setup = function() {\n                p.createCanvas(320, 240);\n                self.video = p.createCapture(p.VIDEO, {\n                    video: {\n                        width: 320,\n                        height: 240,\n                        aspectRatio: 1\n                    }\n                });\n                self.video.hide();\n            };\n\n            p.draw = function() {\n                // draw an arrow for a vector at a given base position\n                // function drawArrow(base, vec, myColor) {\n                //     p.push();\n                //     p.stroke(myColor);\n                //     p.strokeWeight(3);\n                //     p.fill(myColor);\n                //     p.translate(base.x, base.y);\n                //     p.line(0, 0, vec.x, vec.y);\n                //     p.rotate(vec.heading());\n                //     let arrowSize = 7;\n                //     p.translate(vec.mag() - arrowSize, 0);\n                //     p.triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n                //     p.pop();\n                // }\n\n                // mirror the frame and present it in dom\n                p.translate(self.video.width, 0);\n                p.scale(-1, 1);\n                p.image(self.video, 0, 0, self.video.width, self.video.height);\n\n                // check if hand was detected and draw keypoints\n                if (self.hand.detected) {\n                    // draw hand bounding box\n                    p.stroke(0);\n                    p.noFill();\n                    p.strokeWeight(3);\n                    p.rect(self.hand.x, self.hand.y, self.hand.w, self.hand.h);\n\n                    p.stroke(\"blue\");\n                    p.strokeWeight(5);\n\n                    // console.log(self.hand.landmarks);\n\n                    // draw hand landmarks\n                    for (let i = 0; i < self.hand.landmarks.length; i++) {\n                        const landmark = self.hand.landmarks[i];\n\n                        p.point(landmark[0], landmark[1]);\n                    }\n\n                    // draw hand lines for indexFinder, only, test function\n                    // for (let i = 0; i < self.hand.vectors.length; i++) {\n\n                    //     if(i<(self.hand.vectors.length-1)) {\n                    //         const base = self.hand.vectors[i]\n                    //         const next = self.hand.vectors[i+1];\n                    //         // const v0 = p.createVector(0, 0, 0);\n                    //         const v1 = p.createVector(base[0], base[1]);\n                    //         const v2 = p.createVector(next[0], next[1]);\n                    //         // p.line(base[0], base[1], next[0], next[1])\n                    //         const diff = v2.sub(v1);\n                    //         diff.normalize();\n\n                    //         drawArrow(v1, diff, 'blue');\n                    //         // drawArrow(v0, v2, 'green');\n                    //         // drawArrow(v1, v2, 'purple');\n                    //     }\n                    // }\n                }\n            };\n        },\n\n        modelReady: function() {\n            this.label = this.p5.createDiv(\"Label: ...\");\n            // this.confidence = this.p5.createDiv(\"Confidence: ...\");\n        },\n\n        gotPose: function(results) {\n            // console.log(results);\n\n            this.hand.detected = false;\n\n            // check if anything was detected\n            if (results.length) {\n                // this.label.html(`Label: ${JSON.stringify(results[0])}`);\n\n                // save the actual hand position to be drawn later\n                this.hand.detected = true;\n                this.hand.x = results[0].boundingBox.topLeft[0];\n                this.hand.y = results[0].boundingBox.bottomRight[1];\n                this.hand.w =\n                    results[0].boundingBox.bottomRight[0] -\n                    results[0].boundingBox.topLeft[0];\n                this.hand.h =\n                    results[0].boundingBox.topLeft[1] -\n                    results[0].boundingBox.bottomRight[1];\n\n                this.hand.landmarks = [];\n\n                // save x and y coords of hand 21 landmarks\n                for (let i = 0; i < results[0].landmarks.length; i++) {\n                    const point = [\n                        results[0].landmarks[i][0],\n                        results[0].landmarks[i][1]\n                    ];\n                    this.hand.landmarks.push(point);\n                }\n\n                // generate inputs\n                let inputs = [];\n\n                for (let i = 0; i < this.hand.landmarks.length; i++) {\n                    let x = this.hand.landmarks[i][0] / 320;\n                    let y = this.hand.landmarks[i][1] / 240;\n                    inputs.push(x);\n                    inputs.push(y);\n                }\n\n                // check for collecting\n                if (\n                    this.modes.collect &&\n                    this.collectCounter > 0 &&\n                    this.sign != \"\"\n                ) {\n                    // save data to model\n\n                    let target = [this.sign];\n                    this.model.addData(inputs, target);\n\n                    console.log(\"collecting\");\n                    console.log(this.collectCounter);\n                    console.log(this.sign);\n\n                    // decrease collectcounter\n                    this.collectCounter--;\n                }\n\n                // check for predicting\n                if (this.modes.predict) {\n                    // predict sign\n                    this.model.classify(inputs, this.gotResults);\n                }\n            }\n            if (this.hand.detected) {\n                // this.label.html(`Label: ${JSON.stringify(results[0])}`);\n                this.label.html(`Label: Hand detected!`);\n            } else {\n                this.label.html(\"No Hand detected!\");\n            }\n        },\n\n        gotResults: function(errors, results) {\n            // console.log(\"PREDICTIONS\");\n            // console.log(results[0].label);\n            this.result.html(`Label: ${results[0].label}`);\n        },\n\n        save: function() {\n            console.log(\"Save Data\");\n            this.model.saveData();\n        },\n\n        train: function() {\n            console.log(\"start training\");\n            this.model.loadData(\"/hands_signs_data.json\", this.dataReady);\n        },\n\n        dataReady: function() {\n            console.log(\"data ready\");\n            // this.model.normalizeData();\n            this.model.train({ epochs: 20 }, this.finished);\n        },\n\n        finished: function() {\n            console.log(\"training finished\");\n            this.model.save();\n        }\n    }\n};\n</script>\n","import { render } from \"./About.vue?vue&type=template&id=06d4ee50&bindings={\\\"hand\\\":\\\"data\\\",\\\"sign\\\":\\\"data\\\",\\\"signs\\\":\\\"data\\\",\\\"modes\\\":\\\"data\\\",\\\"collectCounter\\\":\\\"data\\\",\\\"p5\\\":\\\"data\\\",\\\"model\\\":\\\"data\\\",\\\"video\\\":\\\"data\\\",\\\"label\\\":\\\"data\\\",\\\"result\\\":\\\"data\\\",\\\"setup\\\":\\\"options\\\",\\\"modelLoaded\\\":\\\"options\\\",\\\"sketch\\\":\\\"options\\\",\\\"modelReady\\\":\\\"options\\\",\\\"gotPose\\\":\\\"options\\\",\\\"gotResults\\\":\\\"options\\\",\\\"save\\\":\\\"options\\\",\\\"train\\\":\\\"options\\\",\\\"dataReady\\\":\\\"options\\\",\\\"finished\\\":\\\"options\\\"}\"\nimport script from \"./About.vue?vue&type=script&lang=js\"\nexport * from \"./About.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}